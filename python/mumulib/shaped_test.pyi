import unittest
from _typeshed import Incomplete
from mumulib.shaped import AmbiguousShape as AmbiguousShape, HeterogenousList as HeterogenousList, anything as anything, is_shaped as is_shaped, make_shape as make_shape, would_retain_shape as would_retain_shape

cov: Incomplete

class TestShapedScalars(unittest.TestCase):
    def test_int(self) -> None: ...
    def test_float(self) -> None: ...
    def test_str(self) -> None: ...
    def test_bool(self) -> None: ...

class TestShapedContainers(unittest.TestCase):
    def test_tuple_matching(self) -> None: ...
    def test_list_matching(self) -> None: ...
    def test_dict_matching(self) -> None: ...

class TestShapedNested(unittest.TestCase):
    def test_nested_dict(self) -> None: ...
    def test_nested_tuples_lists(self) -> None: ...
    def test_deeply_nested(self) -> None: ...
    def test_exact_match(self) -> None: ...

class TestMakeShape(unittest.TestCase):
    def test_scalars(self) -> None: ...
    def test_anything(self) -> None: ...
    def test_dict(self) -> None: ...
    def test_tuple(self) -> None: ...
    def test_list(self) -> None: ...
    def test_complex_structure(self) -> None: ...

class TestWouldRetainShape(unittest.TestCase):
    def test_single_dict_key(self) -> None: ...
    def test_nested_dict_with_str_fallback_key(self) -> None: ...
    def test_list_index(self) -> None: ...
    def test_tuple_index(self) -> None: ...
    def test_deep_nested_structure(self) -> None: ...
    def test_nonexistent_path(self) -> None: ...
    def test_dict_leaf(self) -> None: ...
    def test_malformed_list(self) -> None: ...
    def test_malformed_list_index(self) -> None: ...
    def test_out_of_range_list_index(self) -> None: ...
    def test_bad_list(self) -> None: ...
    def test_malformed_tuple_index(self) -> None: ...
    def test_out_of_range_tuple_index(self) -> None: ...
    def test_bad_tuple(self) -> None: ...
    def test_extra_segments(self) -> None: ...
    def test_custom_class_bad_shape(self) -> None: ...
