from _typeshed import Incomplete
from io import TextIOWrapper
from mumulib import mumutypes as mumutypes
from typing import Any, AsyncGenerator, Callable

def custom_serializer(obj: Any) -> dict[str, Any] | None: ...
def add_producer(adapter_for_type: type, conv: Callable, mime_type: str = '*/*') -> None: ...
async def produce(thing: Any, state: dict[str, Any]) -> AsyncGenerator[str, None]: ...
async def produce_file(thing: TextIOWrapper, state: dict[str, Any]) -> AsyncGenerator[mumutypes.SpecialResponse, None]: ...
async def produce_json(thing: Any, state: dict[str, Any]) -> AsyncGenerator[str, None]: ...
async def produce_bytes(thing: bytes, state: dict[str, Any]) -> AsyncGenerator[bytes, None]: ...

JSON_TYPES: Incomplete
