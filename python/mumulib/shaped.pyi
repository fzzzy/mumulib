from typing import Any, Callable

CONTAINER_TYPES: list[type]
SCALAR_TYPES: list[type]

class ShapeMismatch(Exception): ...
class TypeMismatch(ShapeMismatch): ...
class KeyMismatch(ShapeMismatch): ...
class SizeMismatch(ShapeMismatch): ...
class PredicateMismatch(ShapeMismatch): ...

def is_shaped(thing: Any, shape: Any) -> bool: ...

class MalformedShape(Exception): ...
class AmbiguousShape(MalformedShape): ...
class HeterogenousList(MalformedShape): ...

def make_shape(what: Any) -> dict[str, Any] | list[Any] | tuple[Any, ...] | type | Callable[[Any], None]: ...
def anything(item: Any) -> None: ...
def would_retain_shape(shape: Any, data: Any, segs: list[str], leaf: Any, debug: bool = False) -> bool: ...
